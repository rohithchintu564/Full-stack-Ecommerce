{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let CartService = /*#__PURE__*/(() => {\n  class CartService {\n    constructor() {\n      this.cartItems = [];\n      this.totalPrice = new BehaviorSubject(0);\n      this.totalQuantity = new BehaviorSubject(0);\n    }\n\n    addToCart(theCartItem) {\n      // check if we already have the item in our cart\n      let alreadyExistsInCart = false;\n      let existingCartItem = undefined;\n\n      if (this.cartItems.length > 0) {\n        // find the item in the cart based on item id\n        existingCartItem = this.cartItems.find(tempCartItem => tempCartItem.id === theCartItem.id); // check if we found it\n\n        alreadyExistsInCart = existingCartItem != undefined;\n      }\n\n      if (alreadyExistsInCart) {\n        // increment the quantity\n        existingCartItem.quantity++;\n      } else {\n        // just add the item to the array\n        this.cartItems.push(theCartItem);\n      } // compute cart total price and total quantity\n\n\n      this.computeCartTotals();\n    }\n\n    computeCartTotals() {\n      let totalPriceValue = 0;\n      let totalQuantityValue = 0;\n\n      for (let currentCartItem of this.cartItems) {\n        totalPriceValue += currentCartItem.quantity * currentCartItem.unitPrice;\n        totalQuantityValue += currentCartItem.quantity;\n      } // publish the new values ... all subscribers will receive the new data\n\n\n      this.totalPrice.next(totalPriceValue);\n      this.totalQuantity.next(totalQuantityValue); // log cart data just for debugging purposes\n\n      this.logCartData(totalPriceValue, totalQuantityValue);\n    }\n\n    logCartData(totalPriceValue, totalQuantityValue) {\n      console.log('Contents of the cart');\n\n      for (let tempCartItem of this.cartItems) {\n        const subTotalPrice = tempCartItem.quantity * tempCartItem.unitPrice;\n        console.log(`name: ${tempCartItem.name}, quantity=${tempCartItem.quantity}, unitPrice=${tempCartItem.unitPrice}, subTotalPrice=${subTotalPrice}`);\n      }\n\n      console.log(`totalPrice: ${totalPriceValue.toFixed(2)}, totalQuantity: ${totalQuantityValue}`);\n      console.log('----');\n    }\n\n    decrementQuantity(theCartItem) {\n      theCartItem.quantity--;\n\n      if (theCartItem.quantity === 0) {\n        this.remove(theCartItem);\n      } else {\n        this.computeCartTotals();\n      }\n    }\n\n    remove(theCartItem) {\n      // get index of item in the array\n      const itemIndex = this.cartItems.findIndex(tempCartItem => tempCartItem.id === theCartItem.id); // if found, remove the item from the array at the given index\n\n      if (itemIndex > -1) {\n        this.cartItems.splice(itemIndex, 1);\n        this.computeCartTotals();\n      }\n    }\n\n  }\n\n  CartService.ɵfac = function CartService_Factory(t) {\n    return new (t || CartService)();\n  };\n\n  CartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CartService,\n    factory: CartService.ɵfac,\n    providedIn: 'root'\n  });\n  return CartService;\n})();","map":null,"metadata":{},"sourceType":"module"}