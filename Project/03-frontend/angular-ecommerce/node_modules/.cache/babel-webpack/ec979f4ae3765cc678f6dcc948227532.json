{"ast":null,"code":"import { __awaiter, __decorate, __param, __metadata } from 'tslib';\nimport { InjectionToken, Injectable, Inject, Optional, Component, Injector, NgModule } from '@angular/core';\nimport { Router, NavigationStart } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { OktaAuth, isAbsoluteUrl, toAbsoluteUrl, toRelativeUrl } from '@okta/okta-auth-js';\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/router';\nconst OKTA_CONFIG = new InjectionToken('okta.config.angular');\nvar packageInfo = {\n  'name': '@okta/okta-angular',\n  'version': '3.0.1'\n};\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nlet OktaAuthService = /*#__PURE__*/(() => {\n  let OktaAuthService = class OktaAuthService extends OktaAuth {\n    constructor(config, location, router) {\n      // If a relative `redirectUri` was passed, convert to absolute URL, including base href, if any.\n      if (config.redirectUri && !isAbsoluteUrl(config.redirectUri) && location) {\n        const baseUri = window.location.origin + location.prepareExternalUrl('');\n        config.redirectUri = toAbsoluteUrl(config.redirectUri, baseUri);\n      }\n\n      const transformAuthState = (oktaAuth, authState) => __awaiter(this, void 0, void 0, function* () {\n        // if `isAuthenticated` was set on config, call it now to override the value of `authState.isAuthenticated`\n        if (config.isAuthenticated) {\n          authState.isAuthenticated = yield config.isAuthenticated(this);\n        } // if `transformAuthState` was set on config, call it now to transform the authState object\n\n\n        if (config.transformAuthState) {\n          authState = yield config.transformAuthState(oktaAuth, authState);\n        }\n\n        return authState;\n      }); // If a router is available, provide a default implementation of `restoreOriginalUri`\n\n\n      const restoreOriginalUri = !config.restoreOriginalUri && router && location ? (oktaAuth, originalUri) => __awaiter(this, void 0, void 0, function* () {\n        const baseUrl = window.location.origin + location.prepareExternalUrl('');\n        const routePath = toRelativeUrl(originalUri, baseUrl);\n        return router.navigateByUrl(routePath);\n      }) : config.restoreOriginalUri;\n      const options = Object.assign({\n        transformAuthState,\n        restoreOriginalUri\n      }, config);\n      super(options);\n      this.config = config;\n      this.location = location; // Customize user agent\n\n      this.userAgent = `${packageInfo.name}/${packageInfo.version} ${this.userAgent}`; // Initialize observers\n\n      this.observers = [];\n      this.$authenticationState = new Observable(observer => {\n        this.observers.push(observer);\n      });\n      this.authStateManager.subscribe(authState => {\n        this.emitAuthenticationState(!!authState.isAuthenticated);\n      });\n\n      if (!this.token.isLoginRedirect()) {\n        // Trigger an initial change event to make sure authState is latest\n        this.authStateManager.updateAuthState();\n      }\n    }\n\n    emitAuthenticationState(state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.observers.forEach(observer => observer.next(state));\n      });\n    }\n\n    signInWithRedirect(options = {}) {\n      const _super = Object.create(null, {\n        signInWithRedirect: {\n          get: () => super.signInWithRedirect\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, function* () {\n        const originalUri = options.originalUri || this.getOriginalUri();\n\n        if (!originalUri) {\n          // Default to the app base as a relative path.\n          options.originalUri = '/';\n        }\n\n        return _super.signInWithRedirect.call(this, options);\n      });\n    } // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/explicit-module-boundary-types\n\n\n    signOut(options) {\n      const _super = Object.create(null, {\n        signOut: {\n          get: () => super.signOut\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, function* () {\n        options = options || {};\n        const postLogoutRedirectUri = options.postLogoutRedirectUri || this.options.postLogoutRedirectUri;\n\n        if (!postLogoutRedirectUri && this.location) {\n          // Default to the app base as an absolute URL, including base href, if any.\n          options.postLogoutRedirectUri = window.location.origin + this.location.prepareExternalUrl('/'); // include trailing slash\n        }\n\n        return _super.signOut.call(this, options);\n      });\n    }\n    /**\n     * Returns the configuration object used.\n     */\n\n\n    getOktaConfig() {\n      return this.config;\n    }\n\n  };\n\n  OktaAuthService.ɵfac = function OktaAuthService_Factory(t) {\n    return new (t || OktaAuthService)(ɵngcc0.ɵɵinject(OKTA_CONFIG), ɵngcc0.ɵɵinject(ɵngcc1.Location, 8), ɵngcc0.ɵɵinject(ɵngcc2.Router, 8));\n  };\n\n  OktaAuthService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OktaAuthService,\n    factory: function (t) {\n      return OktaAuthService.ɵfac(t);\n    }\n  });\n  OktaAuthService = __decorate([__param(0, Inject(OKTA_CONFIG)), __param(1, Optional()), __param(2, Optional()), __metadata(\"design:paramtypes\", [Object, Location, Router])], OktaAuthService);\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n\n  return OktaAuthService;\n})();\nlet OktaCallbackComponent = /*#__PURE__*/(() => {\n  let OktaCallbackComponent = class OktaCallbackComponent {\n    constructor(okta, router) {\n      this.okta = okta;\n      this.router = router;\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          // Parse code or tokens from the URL, store tokens in the TokenManager, and redirect back to the originalUri\n          yield this.okta.handleLoginRedirect();\n        } catch (e) {\n          this.error = e.toString();\n        }\n      });\n    }\n\n  };\n\n  OktaCallbackComponent.ɵfac = function OktaCallbackComponent_Factory(t) {\n    return new (t || OktaCallbackComponent)(ɵngcc0.ɵɵdirectiveInject(OktaAuthService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Router));\n  };\n\n  OktaCallbackComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: OktaCallbackComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 2,\n    vars: 1,\n    template: function OktaCallbackComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.error);\n      }\n    },\n    encapsulation: 2\n  });\n  OktaCallbackComponent = __decorate([__metadata(\"design:paramtypes\", [OktaAuthService, Router])], OktaCallbackComponent);\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n\n  return OktaCallbackComponent;\n})();\nlet OktaLoginRedirectComponent = /*#__PURE__*/(() => {\n  let OktaLoginRedirectComponent = class OktaLoginRedirectComponent {\n    constructor(okta) {\n      this.okta = okta;\n    }\n\n    ngOnInit() {\n      const originalUri = this.okta.getOriginalUri();\n\n      if (!originalUri) {\n        this.okta.setOriginalUri('/');\n      }\n\n      this.okta.signInWithRedirect();\n    }\n\n  };\n\n  OktaLoginRedirectComponent.ɵfac = function OktaLoginRedirectComponent_Factory(t) {\n    return new (t || OktaLoginRedirectComponent)(ɵngcc0.ɵɵdirectiveInject(OktaAuthService));\n  };\n\n  OktaLoginRedirectComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: OktaLoginRedirectComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 0,\n    vars: 0,\n    template: function OktaLoginRedirectComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  OktaLoginRedirectComponent = __decorate([__metadata(\"design:paramtypes\", [OktaAuthService])], OktaLoginRedirectComponent);\n  /*\n   * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n   * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n   *\n   * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n   * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   *\n   * See the License for the specific language governing permissions and limitations under the License.\n   */\n\n  return OktaLoginRedirectComponent;\n})();\nlet OktaAuthGuard = /*#__PURE__*/(() => {\n  let OktaAuthGuard = class OktaAuthGuard {\n    constructor(oktaAuth, injector) {\n      this.oktaAuth = oktaAuth;\n      this.injector = injector;\n\n      this.updateAuthStateListener = authState => {\n        if (!authState.isAuthenticated) {\n          this.handleLogin(this.state.url);\n        }\n      }; // Unsubscribe updateAuthStateListener when route change\n\n\n      const router = injector.get(Router);\n      router.events.pipe(filter(e => e instanceof NavigationStart && this.state && this.state.url !== e.url)).subscribe(() => {\n        this.oktaAuth.authStateManager.unsubscribe(this.updateAuthStateListener);\n      });\n    }\n    /**\n     * Gateway for protected route. Returns true if there is a valid accessToken,\n     * otherwise it will cache the route and start the login flow.\n     * @param route\n     * @param state\n     */\n\n\n    canActivate(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Track states for current route\n        this.route = route;\n        this.state = state; // Protect the route after accessing\n\n        this.oktaAuth.authStateManager.subscribe(this.updateAuthStateListener);\n        const isAuthenticated = yield this.oktaAuth.isAuthenticated();\n\n        if (isAuthenticated) {\n          return true;\n        }\n\n        yield this.handleLogin(state.url);\n        return false;\n      });\n    }\n\n    canActivateChild(route, state) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return this.canActivate(route, state);\n      });\n    }\n\n    handleLogin(fromUri) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Get the operation to perform on failed authentication from\n        // either the global config or route data injection.\n        const onAuthRequired = this.route.data['onAuthRequired'] || this.oktaAuth.getOktaConfig().onAuthRequired; // Store the current path\n\n        this.oktaAuth.setOriginalUri(fromUri);\n\n        if (onAuthRequired) {\n          onAuthRequired(this.oktaAuth, this.injector);\n        } else {\n          this.oktaAuth.signInWithRedirect();\n        }\n      });\n    }\n\n  };\n\n  OktaAuthGuard.ɵfac = function OktaAuthGuard_Factory(t) {\n    return new (t || OktaAuthGuard)(ɵngcc0.ɵɵinject(OktaAuthService), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  OktaAuthGuard.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OktaAuthGuard,\n    factory: function (t) {\n      return OktaAuthGuard.ɵfac(t);\n    }\n  });\n  OktaAuthGuard = __decorate([__metadata(\"design:paramtypes\", [OktaAuthService, Injector])], OktaAuthGuard);\n  return OktaAuthGuard;\n})();\n\nfunction createOktaService(config, location, router) {\n  return new OktaAuthService(config, location, router);\n}\n/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\n\nconst ɵ0 = createOktaService;\nlet OktaAuthModule = /*#__PURE__*/(() => {\n  let OktaAuthModule = class OktaAuthModule {};\n\n  OktaAuthModule.ɵfac = function OktaAuthModule_Factory(t) {\n    return new (t || OktaAuthModule)();\n  };\n\n  OktaAuthModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: OktaAuthModule\n  });\n  OktaAuthModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [OktaAuthGuard, {\n      provide: OktaAuthService,\n      useFactory: ɵ0,\n      deps: [OKTA_CONFIG, Location, Router // optional\n      ]\n    }]\n  });\n  return OktaAuthModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(OktaAuthModule, {\n    declarations: [OktaCallbackComponent, OktaLoginRedirectComponent],\n    exports: [OktaCallbackComponent, OktaLoginRedirectComponent]\n  });\n})();\n\nexport { OKTA_CONFIG, OktaAuthGuard, OktaAuthModule, OktaAuthService, OktaCallbackComponent, OktaLoginRedirectComponent, createOktaService as ɵa }; //# sourceMappingURL=okta-angular.js.map","map":null,"metadata":{},"sourceType":"module"}